name: Build and deploy Node.js app to Azure Web App - SalesInquiryGroup

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Create deployment package
        run: |
          # Extract original dependencies from package.json
          DEPS=$(node -e "const pkg = require('./package.json'); console.log(JSON.stringify(pkg.dependencies || {}))")
          DEV_DEPS=$(node -e "const pkg = require('./package.json'); console.log(JSON.stringify(pkg.devDependencies || {}))")
          
          # Create a production-ready package
          mkdir -p deployment
          
          # Copy built files and necessary assets
          cp -r dist deployment/
          
          # Copy original package.json but modify it for production
          node -e "
            const pkg = require('./package.json');
            
            // Keep only what's needed for production
            const newPkg = {
              name: pkg.name,
              version: pkg.version,
              type: pkg.type,
              engines: pkg.engines,
              scripts: {
                start: 'node dist/index.js'
              },
              dependencies: pkg.dependencies
            };
            
            // Remove dev dependencies
            delete newPkg.devDependencies;
            delete newPkg.optionalDependencies;
            
            // Write the modified package.json
            require('fs').writeFileSync('./deployment/package.json', JSON.stringify(newPkg, null, 2));
          "
          
          # Create a startup file for Azure
          cat > deployment/startup.js << EOF
          // startup.js - Azure startup script
          const { spawn } = require('child_process');
          const path = require('path');
          
          // Log the environment for debugging
          console.log('Starting application with environment:');
          console.log('NODE_ENV:', process.env.NODE_ENV);
          console.log('PORT:', process.env.PORT);
          console.log('Current directory:', process.cwd());
          console.log('Files in directory:', require('fs').readdirSync('.'));
          console.log('Files in dist directory:', require('fs').readdirSync('./dist'));
          
          // Start the application
          const app = spawn('node', ['dist/index.js'], {
            stdio: 'inherit',
            env: { ...process.env, NODE_ENV: 'production' }
          });
          
          app.on('error', (err) => {
            console.error('Failed to start application:', err);
            process.exit(1);
          });
          
          app.on('exit', (code) => {
            console.log('Application exited with code:', code);
            process.exit(code);
          });
          EOF
          
          # Create web.config for Azure with startup.js
          cat > deployment/web.config << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="startup.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="nodejs">
                    <match url="(.*)" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="startup.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                nodeProcessCommandLine="node"
                watchedFiles="*.js;iisnode.yml"
                loggingEnabled="true"
                logDirectory="iisnode"
                debuggingEnabled="true"
              />
            </system.webServer>
          </configuration>
          EOF
          
          # Create a basic .env file
          echo "NODE_ENV=production" > deployment/.env
          
          # Install dependencies in the deployment directory
          cd deployment
          npm install --omit=dev
          
          # Zip everything for deployment
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_886E565E15F54F64825AFC8382A0E7EA }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D814736B79FA4FBC95BEDB87DF16ECCF }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_51420C1A3F184E88ADC3E862DB86A4EF }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'SalesInquiryGroup'
          slot-name: 'Production'
          package: .
          
      - name: Set App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: 'SalesInquiryGroup'
          app-settings-json: |
            [
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "PORT",
                "value": "5000"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~20"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "false"
              },
              {
                "name": "WEBSITE_MEMORY_LIMIT_MB",
                "value": "2048"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "0"
              }
            ]
