name: Build and deploy Node.js app to Azure Web App - SalesInquiryGroup

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci --no-audit
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Verify Radix UI dependencies
        run: |
          echo "Verifying Radix UI dependencies..."
          # Create a list of required Radix UI dependencies
          RADIX_DEPS=(
            "@radix-ui/react-slot"
            "@radix-ui/react-popover"
            "@radix-ui/react-dialog"
            "@radix-ui/react-select"
            "@radix-ui/react-toast"
            "@radix-ui/react-scroll-area"
            "@radix-ui/react-aspect-ratio"
            "@radix-ui/react-alert-dialog"
            "@radix-ui/react-avatar"
            "@radix-ui/react-checkbox"
            "@radix-ui/react-dropdown-menu"
            "@radix-ui/react-label"
            "@radix-ui/react-separator"
            "@radix-ui/react-switch"
            "@radix-ui/react-tabs"
            "@radix-ui/react-radio-group"
            "@radix-ui/react-progress"
            "@radix-ui/react-collapsible"
          )
          
          # Check each dependency and install if missing
          for DEP in "${RADIX_DEPS[@]}"; do
            if [ ! -d "node_modules/$DEP" ]; then
              echo "Installing missing dependency: $DEP"
              npm install "$DEP"
            else
              echo "✓ $DEP is installed"
            fi
          done
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Verify other critical dependencies
        run: |
          echo "Verifying other critical dependencies..."
          # Create a list of required dependencies
          DEPS=(
            "react"
            "react-dom"
            "wouter"
            "lucide-react"
            "react-icons"
            "@tanstack/react-query"
            "firebase"
            "gapi-script"
            "papaparse"
            "@hookform/resolvers"
            "react-hook-form"
            "zod"
            "date-fns"
            "express"
            "recharts"
            "class-variance-authority"
            "clsx"
            "tailwind-merge"
          )
          
          # Check each dependency and install if missing
          for DEP in "${DEPS[@]}"; do
            if [ ! -d "node_modules/$DEP" ]; then
              echo "Installing missing dependency: $DEP"
              npm install "$DEP"
            else
              echo "✓ $DEP is installed"
            fi
          done
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Debug dependency structure
        run: |
          echo "Debugging dependency structure..."
          ls -la node_modules/@radix-ui || echo "@radix-ui not found"
          
          # Check for specific Radix UI components
          find node_modules -name "react-slot" | grep radix
          
          # Check package.json resolution
          echo "Checking package resolution..."
          node -e "console.log('Radix UI Slot:', require.resolve('@radix-ui/react-slot'))" || echo "Radix UI Slot not resolvable"

      - name: Create pre-build patch for Vite
        run: |
          echo "Creating pre-build patch for Vite..."
          # Create a patch file to fix Vite's handling of Radix UI
          cat > vite-patch.js << EOF
          // Patch to fix Vite's handling of Radix UI
          import fs from 'fs';
          
          // Read the vite.config.ts file
          const configPath = './vite.config.ts';
          let config = fs.readFileSync(configPath, 'utf8');
          
          // Add Radix UI components to external if not already there
          if (!config.includes('rollupOptions.external')) {
            const externalConfig = \`
            rollupOptions: {
              external: [
                '@radix-ui/react-slot',
                '@radix-ui/react-popover',
                '@radix-ui/react-dialog',
                '@radix-ui/react-select',
                '@radix-ui/react-toast',
                '@radix-ui/react-scroll-area',
                '@radix-ui/react-aspect-ratio',
                '@radix-ui/react-alert-dialog',
                '@radix-ui/react-avatar',
                '@radix-ui/react-checkbox',
                '@radix-ui/react-dropdown-menu',
                '@radix-ui/react-label',
                '@radix-ui/react-separator',
                '@radix-ui/react-switch',
                '@radix-ui/react-tabs',
                '@radix-ui/react-radio-group',
                '@radix-ui/react-progress',
                '@radix-ui/react-collapsible'
              ],
            }\`;
            
            // Replace the empty rollupOptions with our new config
            config = config.replace('rollupOptions: {\\n      external: [],\\n    }', externalConfig);
            
            // Write the updated config back to the file
            fs.writeFileSync(configPath, config);
            console.log('Updated vite.config.ts with Radix UI externals');
          }
          EOF
          
          # Run the patch
          node vite-patch.js

      - name: Build application with special handling for Radix UI
        run: |
          echo "Building application with special handling for Radix UI..."
          # Create a temporary build script
          cat > build-with-radix.js << EOF
          // Custom build script to handle Radix UI
          const { execSync } = require('child_process');
          
          try {
            // First, try to build normally
            console.log('Attempting normal build...');
            execSync('npm run build', { stdio: 'inherit' });
          } catch (error) {
            console.log('Normal build failed, trying alternative approach...');
            
            // If that fails, try with explicit externals
            console.log('Creating explicit externals for Radix UI...');
            const viteConfig = \`
          import { defineConfig } from "vite";
          import react from "@vitejs/plugin-react";
          import path from "path";
          import { fileURLToPath } from "url";

          const __dirname = path.dirname(fileURLToPath(import.meta.url));

          export default defineConfig({
            plugins: [react()],
            resolve: {
              alias: {
                "@db": path.resolve(__dirname, "db"),
                "@": path.resolve(__dirname, "client", "src"),
                "@shared": path.resolve(__dirname, "shared"),
                "@assets": path.resolve(__dirname, "attached_assets"),
              },
            },
            root: path.resolve(__dirname, "client"),
            build: {
              outDir: path.resolve(__dirname, "dist/public"),
              emptyOutDir: true,
              sourcemap: false,
              rollupOptions: {
                external: [
                  '@radix-ui/react-slot',
                  '@radix-ui/react-popover',
                  '@radix-ui/react-dialog',
                  '@radix-ui/react-select',
                  '@radix-ui/react-toast',
                  '@radix-ui/react-scroll-area',
                  '@radix-ui/react-aspect-ratio',
                  '@radix-ui/react-alert-dialog',
                  '@radix-ui/react-avatar',
                  '@radix-ui/react-checkbox',
                  '@radix-ui/react-dropdown-menu',
                  '@radix-ui/react-label',
                  '@radix-ui/react-separator',
                  '@radix-ui/react-switch',
                  '@radix-ui/react-tabs',
                  '@radix-ui/react-radio-group',
                  '@radix-ui/react-progress',
                  '@radix-ui/react-collapsible'
                ],
              }
            },
            optimizeDeps: {
              include: [
                "react",
                "react-dom",
                "react/jsx-runtime",
                "wouter",
                "lucide-react",
                "react-icons",
                "react-icons/si",
                "recharts",
                "@tanstack/react-query",
                "firebase",
                "firebase/auth",
                "firebase/app",
                "gapi-script",
                "papaparse",
                "@hookform/resolvers",
                "@hookform/resolvers/zod",
                "react-hook-form",
                "zod",
                "date-fns"
              ],
              exclude: [
                '@radix-ui/react-slot',
                '@radix-ui/react-popover',
                '@radix-ui/react-dialog',
                '@radix-ui/react-select',
                '@radix-ui/react-toast',
                '@radix-ui/react-scroll-area',
                '@radix-ui/react-aspect-ratio',
                '@radix-ui/react-alert-dialog',
                '@radix-ui/react-avatar',
                '@radix-ui/react-checkbox',
                '@radix-ui/react-dropdown-menu',
                '@radix-ui/react-label',
                '@radix-ui/react-separator',
                '@radix-ui/react-switch',
                '@radix-ui/react-tabs',
                '@radix-ui/react-radio-group',
                '@radix-ui/react-progress',
                '@radix-ui/react-collapsible'
              ]
            },
            server: {
              port: 5173,
              strictPort: true,
              host: true,
            }
          });
            \`;
            
            // Write the temporary config
            require('fs').writeFileSync('vite.config.js', viteConfig);
            
            // Try building with the new config
            console.log('Building with explicit externals...');
            execSync('npm run build', { stdio: 'inherit' });
          }
          EOF
          
          # Run the custom build script
          node build-with-radix.js
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max_old_space_size=8192"

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deployment
          
          # Copy essential files
          cp -r dist deployment/
          
          # Copy node_modules for Radix UI
          mkdir -p deployment/node_modules/@radix-ui
          cp -r node_modules/@radix-ui deployment/node_modules/
          
          # Create web.config for Azure
          cat > deployment/web.config << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" />
                    </conditions>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="server.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                nodeProcessCommandLine="node"
                watchedFiles="web.config;*.js"
                loggingEnabled="true"
                logDirectory="iisnode" />
            </system.webServer>
          </configuration>
          EOF
          
          # Create server.js for serving static files
          cat > deployment/server.js << EOF
          import express from 'express';
          import path from 'path';
          import { fileURLToPath } from 'url';

          const __dirname = path.dirname(fileURLToPath(import.meta.url));
          const app = express();
          const PORT = process.env.PORT || 8080;

          // Serve static files
          app.use(express.static(path.join(__dirname, 'public')));

          // Serve index.html for all routes (SPA fallback)
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'index.html'));
          });

          app.listen(PORT, () => {
            console.log(\`Server running on port \${PORT}\`);
          });
          EOF
          
          # Create a production package.json
          cat > deployment/package.json << EOF
          {
            "name": "sales-inquiry-azure",
            "version": "1.0.0",
            "type": "module",
            "engines": {
              "node": ">=20.0.0"
            },
            "scripts": {
              "start": "node server.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "@radix-ui/react-slot": "^1.0.0",
              "@radix-ui/react-popover": "^1.0.0",
              "@radix-ui/react-dialog": "^1.0.0",
              "@radix-ui/react-select": "^1.0.0",
              "@radix-ui/react-toast": "^1.0.0",
              "@radix-ui/react-scroll-area": "^1.0.0"
            }
          }
          EOF
          
          # Install only express in the deployment folder
          cd deployment
          npm install --omit=dev --no-package-lock
          
          # Zip everything for deployment
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_886E565E15F54F64825AFC8382A0E7EA }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D814736B79FA4FBC95BEDB87DF16ECCF }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_51420C1A3F184E88ADC3E862DB86A4EF }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'SalesInquiryGroup'
          slot-name: 'Production'
          package: .
          
      - name: Set App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: 'SalesInquiryGroup'
          app-settings-json: |
            [
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "PORT",
                "value": "8080"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~20"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "false"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "0"
              }
            ]
