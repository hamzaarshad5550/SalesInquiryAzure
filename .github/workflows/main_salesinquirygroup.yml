name: Build and deploy Node.js app to Azure Web App - SalesInquiryGroup

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --no-audit
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Verify critical dependencies
        run: |
          echo "Verifying critical dependencies..."
          # Create a list of required dependencies
          DEPS=(
            "react"
            "react-dom"
            "wouter"
            "lucide-react"
            "react-icons"
            "@tanstack/react-query"
            "firebase"
            "gapi-script"
            "papaparse"
            "@hookform/resolvers"
            "react-hook-form"
            "zod"
            "date-fns"
            "express"
          )
          
          # Check each dependency and install if missing
          for DEP in "${DEPS[@]}"; do
            if [ ! -d "node_modules/$DEP" ]; then
              echo "Installing missing dependency: $DEP"
              npm install "$DEP"
            else
              echo "âœ“ $DEP is installed"
            fi
          done
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Build application
        run: |
          echo "Building application..."
          npm run build
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deployment
          
          # Copy essential files
          cp -r dist deployment/
          cp web.config deployment/
          cp server/azure-entry.js deployment/
          
          # Create a production package.json
          cat > deployment/package.json << EOF
          {
            "name": "sales-inquiry-azure",
            "version": "1.0.0",
            "type": "module",
            "engines": {
              "node": ">=20.0.0"
            },
            "scripts": {
              "start": "node azure-entry.js"
            },
            "dependencies": {
              "@hookform/resolvers": "^3.3.4",
              "@tanstack/react-query": "^5.76.1",
              "date-fns": "^2.30.0",
              "express": "^4.18.2",
              "firebase": "^11.7.3",
              "gapi-script": "^1.2.0",
              "lucide-react": "^0.511.0",
              "papaparse": "^5.5.2",
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "react-hook-form": "^7.49.3",
              "react-icons": "^5.5.0",
              "wouter": "^3.7.0",
              "zod": "^3.22.4"
            }
          }
          EOF
          
          # Create startup script for Azure
          cat > deployment/startup.js << EOF
          // Azure startup script
          console.log('Starting application via startup.js...');
          import('./azure-entry.js')
            .then(() => console.log('Application started successfully'))
            .catch(err => {
              console.error('Failed to start application:', err);
              process.exit(1);
            });
          EOF
          
          # Create a basic .env file
          cat > deployment/.env << EOF
          NODE_ENV=production
          PORT=8080
          EOF
          
          # Install production dependencies
          cd deployment
          npm install --omit=dev --no-package-lock
          
          # Create web.config if it doesn't exist
          if [ ! -f "web.config" ]; then
            cat > web.config << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="startup.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^startup.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="dist/public{REQUEST_URI}" />
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="startup.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                nodeProcessCommandLine="node"
                watchedFiles="web.config;*.js"
                loggingEnabled="true"
                logDirectory="iisnode" />
            </system.webServer>
          </configuration>
          EOF
          fi
          
          # Zip everything for deployment
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_886E565E15F54F64825AFC8382A0E7EA }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D814736B79FA4FBC95BEDB87DF16ECCF }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_51420C1A3F184E88ADC3E862DB86A4EF }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'SalesInquiryGroup'
          slot-name: 'Production'
          package: .
          
      - name: Set App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: 'SalesInquiryGroup'
          app-settings-json: |
            [
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "PORT",
                "value": "8080"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~20"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "false"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "0"
              }
            ]
